/**
 * You can use echo as starter project.
 */
syntax = "proto3";
package catalog;

option go_package="catalogpb";

enum StoreType{
	MONGO = 0;
}

message Reference{
	string refColId = 1;
	string refObjId = 2;
	string refDbName = 3;
}

message References{
	repeated Reference values = 1;
}

message Connection {
	string id = 1;
	string name = 2;
	string host = 3;
	StoreType store = 5;
	string user = 6;
	string password = 7;
	int32 port = 8;
	int32 timeout = 9;
	string options = 10;
}

// Save connection
message CreateConnectionRqst {
	Connection connection = 1;
}

message CreateConnectionRsp {
	bool result = 1;
}

// Delete connection
message DeleteConnectionRqst {
	string id = 1;
}

message DeleteConnectionRsp {
	bool result = 1;
}

message Language{
	string code = 1;
	string name = 2;
}

// Property define a range of information.
message PropertyDefinition{
	// Unique univeral identifier.
	string id = 1;
	string languageCode = 2;
	string name = 3;
	string abreviation = 4;
	string description = 5;
	
	enum Type{
		numerical = 0;
		textual = 1;
		boolean = 2;
		dimentional=3;
		enumeration=4;
		aggregate=5;
	}
	
	Type type = 6;
	
	// Use when the propety is an aggregate
	PropertyDefinitions properties = 7;
	References propertiesIds = 8;
	
	// Use when property is an enumeration
	repeated string choices = 9;
}

message PropertyDefinitions{
	repeated PropertyDefinition values = 1;
}

// Item is a composition of properties.
message ItemDefinition {
	// Unique univeral identifier.
	string id = 1;
	string languageCode = 2;
	string name = 3; // The oficial item name
	string abreviation = 4;
	string description = 5;
    repeated string alias = 6; // also named ...
    repeated string keyWords = 7; // Help to retreive the item. (use it insted of category)
	
	PropertyDefinitions properties = 8;
	References propertiesIds = 9;
	
	// releaded items.
	References releadedItemDefintionsRefs = 10;
	
	// equivalent items
	References equivalentsItemDefintionsRefs = 11;
	
	// the categorie the item belong to.
	Reference categories = 12;
}

// Append a category to an item definition
message AppendItemDefinitionCategoryRequest{
	string connectionId = 1;
	Reference category = 2;
	Reference itemDefinition = 3;
}

message AppendItemDefinitionCategoryResponse{
	bool result=1;
}

// Remove a category from an item definition.
message RemoveItemDefinitionCategoryRequest{
	string connectionId = 1;
	Reference category = 2;
	Reference itemDefinition = 3;
}

message RemoveItemDefinitionCategoryResponse{
	bool result=1;
}

// The unit of measure.
message UnitOfMeasure{
	string id = 1;
	string languageCode = 2;
	string name = 3;
	string abreviation = 4;
	string description = 5;
}

// The category
message Category{
	string id = 1;
	string name = 2;
	string languageCode = 3;
	References categories = 4;
}

// The localisation
message Localisation {
	string id = 1;
	string name = 2;
	string languageCode = 3;
	repeated Localisation subLocalisations = 4;
}

// The Inventory
message Inventory {
	string id = 1;
	string name = 2;
	string languageCode = 3;
	UnitOfMeasure unitOfMeasure = 4;
	int64 safetyStock = 5;
	int64 reorderQte = 6;
	int64 qte = 7;
	double factor = 8;
	Reference localisation = 9;
}

// The currency
enum Currency{
	us = 0;
	can = 1;
	euro = 2;
}

// The price.
message Price {
	double value = 1;
	Currency currency = 2;
}

// The package
message Package {
	string id = 1;
	string languageCode = 2;
	string description = 3;
	References itemDefinitions = 4;
	Reference unitOfMeasure = 5;
	int64 qte = 6;
	Reference inventory = 7;
}

message Supplier {
	string id = 1;
	string name = 2;
}

message PackageSupplier {
	string id = 1; // the supplier number.
	Reference supplier = 2;
	Reference package = 3;
	Price price = 4;
	int64 date = 5;
}

// The manufacturer.
message Manufacturer {
	string id = 1;
	string name = 2;
}

// The item manufacturer.
message ItemManufacturer {
	string id = 1; // the manufacturer number.
	Reference manufacturer = 2;
	Reference item = 3;
}

message Dimension{
	string unitId = 1;
	double value = 2;
}

message PropertyValue { 
	string propertyDefinitionId = 1;
	string languageCode = 2;
	
	message Booleans {
		repeated bool values = 1;
	}
		
	message Numerics {
		repeated double values = 1;
	}
	
	message Strings {
		repeated string values = 1;
	}
	
	message Dimensions {
		repeated Dimensions values = 1;
	}

	oneof value {
		// single value
		Dimension dimension_val = 3;
		string text_val = 4;
		double number_val = 5;
		bool boolean_val = 6;
		// multiple values
		Dimensions dimension_arr = 7;
		Strings text_arr = 8;
		Numerics number_arr = 9;
		Booleans boolean_arr = 10;
	}
}

// Item instance
message ItemInstance {
	string id = 1;
	string itemDefinitionId = 2;
	repeated PropertyValue values = 3;
}

message SaveUnitOfMesureRequest{
	string connectionId = 1;
	UnitOfMeasure unitOfMeasure = 2;
}

message SaveUnitOfMesureResponse{
	string id = 1;
}

message SavePropertyDefinitionRequest{
	string connectionId = 1;
	PropertyDefinition propertyDefinition = 2;
}

message SavePropertyDefinitionResponse{
	string id = 1;
}

message SaveItemDefinitionRequest{
	string connectionId = 1;
	ItemDefinition itemDefinition = 2;
}

message SaveItemDefinitionResponse{
	string id = 1;
}

message SaveItemInstanceRequest{
	string connectionId = 1;
	ItemInstance itemInstance = 2;
}

message SaveItemInstanceResponse{
	string id = 1;
}

message SaveManufacturerRequest {
	string connectionId = 1;
	Manufacturer manufacturer = 2;
}

message SaveManufacturerResponse {
	string id = 1;
}

message SaveSupplierRequest {
	string connectionId = 1;
	Supplier supplier = 2;
}

message SaveSupplierResponse {
	string id = 1;
}

message SaveLocalisationRequest {
	string connectionId = 1;
	Localisation localisation = 2;
}

message SaveLocalisationResponse {
	string id = 1;
}

message SaveCategoryRequest {
	string connectionId = 1;
	Category category = 2;
}

message SaveCategoryResponse {
	string id = 1;
}

message SaveInventoryRequest {
	string connectionId = 1;
	Inventory inventory = 2;
}

message SaveInventoryResponse {
	string id = 1;
}

message SavePackageRequest {
	string connectionId = 1;
	Package package = 2;
}

message SavePackageResponse {
	string id = 1;
}

message SavePackageSupplierRequest {
	string connectionId = 1;
	PackageSupplier packageSupplier = 2;
}

message SavePackageSupplierResponse {
	string id = 1;
}

message SaveItemManufacturerRequest {
	string connectionId = 1;
	ItemManufacturer itemManafacturer = 2;
}

message SaveItemManufacturerResponse {
	string id = 1;
}

service CatalogService {
  	// Save function.
	
	// Save a connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp){};
	
	// Delete a connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp){};
	
	//////////////////////// Save (Create) functions ///////////////////////////
	
	// Save unit of measure exemple inch 
	rpc SaveUnitOfMesure(SaveUnitOfMesureRequest) returns (SaveUnitOfMesureResponse){};
	
	// Save property definition return the Id of the Saved property
	rpc SavePropertyDefinition(SavePropertyDefinitionRequest) returns (SavePropertyDefinitionResponse){};
	
	// Save item definition.
	rpc SaveItemDefinition(SaveItemDefinitionRequest) returns (SaveItemDefinitionResponse){};
	
	// Save item response request.
	rpc SaveItemInstance(SaveItemInstanceRequest) returns (SaveItemInstanceResponse){};
	
	// Save Manufacturer
	rpc SaveManufacturer(SaveManufacturerRequest) returns (SaveManufacturerResponse){};
	
	// Save Supplier
	rpc SaveSupplier(SaveSupplierRequest) returns (SaveSupplierResponse){};
	
	// Save localisation
	rpc SaveLocalisation(SaveLocalisationRequest) returns (SaveLocalisationResponse){};
	
	// Save Inventory
	rpc SaveInventory(SaveInventoryRequest) returns (SaveInventoryResponse){};
	
	// Save Package
	rpc SavePackage(SavePackageRequest) returns (SavePackageResponse){};
	
	// Save Package Supplier
	rpc SavePackageSupplier(SavePackageSupplierRequest) returns (SavePackageSupplierResponse){};
	
	// Save Item Manufacturer
	rpc SaveItemManufacturer(SaveItemManufacturerRequest) returns (SaveItemManufacturerResponse){};
	
	// Save Item Category
	rpc SaveCategory(SaveCategoryRequest) returns (SaveCategoryResponse){};
	
	// Append a Category to item definition.
	rpc AppendItemDefinitionCategory(AppendItemDefinitionCategoryRequest) returns (AppendItemDefinitionCategoryResponse);
	
	// Remove a Category from item definition.
	rpc RemoveItemDefinitionCategory(RemoveItemDefinitionCategoryRequest) returns (RemoveItemDefinitionCategoryResponse);
	
	
}