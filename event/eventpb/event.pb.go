// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event/eventpb/event.proto

package eventpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type QuitRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuitRequest) Reset()         { *m = QuitRequest{} }
func (m *QuitRequest) String() string { return proto.CompactTextString(m) }
func (*QuitRequest) ProtoMessage()    {}
func (*QuitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{1}
}

func (m *QuitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuitRequest.Unmarshal(m, b)
}
func (m *QuitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuitRequest.Marshal(b, m, deterministic)
}
func (m *QuitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuitRequest.Merge(m, src)
}
func (m *QuitRequest) XXX_Size() int {
	return xxx_messageInfo_QuitRequest.Size(m)
}
func (m *QuitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuitRequest proto.InternalMessageInfo

func (m *QuitRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type QuitResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuitResponse) Reset()         { *m = QuitResponse{} }
func (m *QuitResponse) String() string { return proto.CompactTextString(m) }
func (*QuitResponse) ProtoMessage()    {}
func (*QuitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{2}
}

func (m *QuitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuitResponse.Unmarshal(m, b)
}
func (m *QuitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuitResponse.Marshal(b, m, deterministic)
}
func (m *QuitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuitResponse.Merge(m, src)
}
func (m *QuitResponse) XXX_Size() int {
	return xxx_messageInfo_QuitResponse.Size(m)
}
func (m *QuitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuitResponse proto.InternalMessageInfo

func (m *QuitResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type OnEventRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnEventRequest) Reset()         { *m = OnEventRequest{} }
func (m *OnEventRequest) String() string { return proto.CompactTextString(m) }
func (*OnEventRequest) ProtoMessage()    {}
func (*OnEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{3}
}

func (m *OnEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnEventRequest.Unmarshal(m, b)
}
func (m *OnEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnEventRequest.Marshal(b, m, deterministic)
}
func (m *OnEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnEventRequest.Merge(m, src)
}
func (m *OnEventRequest) XXX_Size() int {
	return xxx_messageInfo_OnEventRequest.Size(m)
}
func (m *OnEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnEventRequest proto.InternalMessageInfo

func (m *OnEventRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type OnEventResponse struct {
	Evt                  *Event   `protobuf:"bytes,1,opt,name=evt,proto3" json:"evt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnEventResponse) Reset()         { *m = OnEventResponse{} }
func (m *OnEventResponse) String() string { return proto.CompactTextString(m) }
func (*OnEventResponse) ProtoMessage()    {}
func (*OnEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{4}
}

func (m *OnEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnEventResponse.Unmarshal(m, b)
}
func (m *OnEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnEventResponse.Marshal(b, m, deterministic)
}
func (m *OnEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnEventResponse.Merge(m, src)
}
func (m *OnEventResponse) XXX_Size() int {
	return xxx_messageInfo_OnEventResponse.Size(m)
}
func (m *OnEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OnEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OnEventResponse proto.InternalMessageInfo

func (m *OnEventResponse) GetEvt() *Event {
	if m != nil {
		return m.Evt
	}
	return nil
}

type SubscribeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{5}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubscribeRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type SubscribeResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{6}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type UnSubscribeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnSubscribeRequest) Reset()         { *m = UnSubscribeRequest{} }
func (m *UnSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*UnSubscribeRequest) ProtoMessage()    {}
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{7}
}

func (m *UnSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnSubscribeRequest.Unmarshal(m, b)
}
func (m *UnSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *UnSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnSubscribeRequest.Merge(m, src)
}
func (m *UnSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_UnSubscribeRequest.Size(m)
}
func (m *UnSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnSubscribeRequest proto.InternalMessageInfo

func (m *UnSubscribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnSubscribeRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type UnSubscribeResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnSubscribeResponse) Reset()         { *m = UnSubscribeResponse{} }
func (m *UnSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*UnSubscribeResponse) ProtoMessage()    {}
func (*UnSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{8}
}

func (m *UnSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnSubscribeResponse.Unmarshal(m, b)
}
func (m *UnSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *UnSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnSubscribeResponse.Merge(m, src)
}
func (m *UnSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_UnSubscribeResponse.Size(m)
}
func (m *UnSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnSubscribeResponse proto.InternalMessageInfo

func (m *UnSubscribeResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type PublishRequest struct {
	Evt                  *Event   `protobuf:"bytes,1,opt,name=evt,proto3" json:"evt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{9}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetEvt() *Event {
	if m != nil {
		return m.Evt
	}
	return nil
}

type PublishResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c88e0126701e74a, []int{10}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "event.Event")
	proto.RegisterType((*QuitRequest)(nil), "event.QuitRequest")
	proto.RegisterType((*QuitResponse)(nil), "event.QuitResponse")
	proto.RegisterType((*OnEventRequest)(nil), "event.OnEventRequest")
	proto.RegisterType((*OnEventResponse)(nil), "event.OnEventResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "event.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "event.SubscribeResponse")
	proto.RegisterType((*UnSubscribeRequest)(nil), "event.UnSubscribeRequest")
	proto.RegisterType((*UnSubscribeResponse)(nil), "event.UnSubscribeResponse")
	proto.RegisterType((*PublishRequest)(nil), "event.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "event.PublishResponse")
}

func init() { proto.RegisterFile("event/eventpb/event.proto", fileDescriptor_7c88e0126701e74a) }

var fileDescriptor_7c88e0126701e74a = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x4f, 0xf2, 0x30,
	0x14, 0x66, 0xbc, 0x7c, 0xbc, 0x1c, 0x16, 0xd0, 0x43, 0x44, 0xd8, 0x85, 0xc1, 0xc6, 0x18, 0x8c,
	0x91, 0x2f, 0xef, 0x08, 0x17, 0xc6, 0x44, 0x6f, 0xd5, 0x11, 0x6f, 0xbc, 0x63, 0xd0, 0xc4, 0x25,
	0x38, 0xe6, 0xba, 0xee, 0x1f, 0xfa, 0xbf, 0xcc, 0xda, 0xae, 0xd9, 0x06, 0x61, 0x89, 0x37, 0xdb,
	0x69, 0xcf, 0xf3, 0x91, 0xf3, 0xb4, 0x85, 0x3e, 0x8d, 0xa8, 0x17, 0x8e, 0xc5, 0xd7, 0x77, 0xe4,
	0x7f, 0xe4, 0x07, 0xbb, 0x70, 0x87, 0x55, 0xb1, 0x20, 0x63, 0xa8, 0x3e, 0xc5, 0x05, 0x22, 0x54,
	0xbc, 0xd5, 0x17, 0xed, 0x19, 0x03, 0x63, 0xd8, 0xb0, 0x45, 0x1d, 0xef, 0x6d, 0x56, 0xe1, 0xaa,
	0x57, 0x1e, 0x18, 0x43, 0xd3, 0x16, 0x35, 0xb9, 0x84, 0xe6, 0x1b, 0x77, 0x43, 0x9b, 0x7e, 0x73,
	0xca, 0x04, 0x8d, 0x73, 0x77, 0x93, 0xd0, 0xe2, 0x9a, 0x5c, 0x83, 0x29, 0x21, 0xcc, 0xdf, 0x79,
	0x8c, 0x62, 0x17, 0x6a, 0x01, 0x65, 0x7c, 0x1b, 0x0a, 0xd4, 0x7f, 0x5b, 0xad, 0xc8, 0x15, 0xb4,
	0x5e, 0x3c, 0xe1, 0x7e, 0x4c, 0x6d, 0x0a, 0x6d, 0x8d, 0x52, 0x82, 0x17, 0xf0, 0x8f, 0x46, 0x52,
	0xad, 0x39, 0x33, 0x47, 0x72, 0x2c, 0x09, 0x89, 0x1b, 0x64, 0x0e, 0x27, 0x4b, 0xee, 0xb0, 0x75,
	0xe0, 0x3a, 0x34, 0x25, 0x7d, 0x68, 0x3e, 0x61, 0x57, 0x4e, 0xd9, 0xdd, 0xc2, 0x69, 0x8a, 0x5b,
	0x30, 0xc1, 0x02, 0xf0, 0xdd, 0xfb, 0xb3, 0xd5, 0x1d, 0x74, 0x32, 0xec, 0x02, 0xb3, 0x09, 0xb4,
	0x5e, 0xb9, 0xb3, 0x75, 0xd9, 0x67, 0x62, 0x54, 0x94, 0xc3, 0x0d, 0xb4, 0x35, 0xe3, 0xb8, 0xf8,
	0xec, 0xa7, 0x0c, 0xa6, 0x60, 0x2e, 0x69, 0x10, 0xb9, 0x6b, 0x8a, 0x0b, 0xa8, 0xab, 0xd8, 0xf1,
	0x4c, 0x29, 0x67, 0x0f, 0xcb, 0xea, 0xe6, 0xb7, 0xa5, 0x05, 0x29, 0x4d, 0x0c, 0x9c, 0x42, 0x25,
	0xbe, 0x02, 0x88, 0x0a, 0x93, 0xba, 0x32, 0x56, 0x27, 0xb3, 0x97, 0x90, 0xf0, 0x01, 0x1a, 0x3a,
	0x0b, 0x3c, 0x57, 0x98, 0x7c, 0xb6, 0x56, 0x6f, 0xbf, 0xa1, 0x15, 0x9e, 0xa1, 0x99, 0xca, 0x13,
	0xfb, 0x0a, 0xba, 0x7f, 0x42, 0x96, 0x75, 0xa8, 0xa5, 0x75, 0xe6, 0x50, 0x57, 0xb1, 0xe9, 0xd1,
	0xb3, 0xc1, 0xeb, 0xd1, 0x73, 0xe9, 0x92, 0xd2, 0x63, 0xe3, 0xa3, 0xae, 0x5e, 0x9b, 0x53, 0x13,
	0x0f, 0xed, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x94, 0xf5, 0x28, 0xff, 0x85, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	// One stream by client.
	OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (EventService_OnEventClient, error)
	// Return from OnEvent.
	Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (*QuitResponse, error)
	// Connect to an event channel or create it if it not already exist
	// and stay in that function until UnSubscribe is call.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// Disconnect to an event channel.(Return from Subscribe)
	UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*UnSubscribeResponse, error)
	// Publish event on channel.
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (EventService_OnEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/event.EventService/OnEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceOnEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_OnEventClient interface {
	Recv() (*OnEventResponse, error)
	grpc.ClientStream
}

type eventServiceOnEventClient struct {
	grpc.ClientStream
}

func (x *eventServiceOnEventClient) Recv() (*OnEventResponse, error) {
	m := new(OnEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (*QuitResponse, error) {
	out := new(QuitResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*UnSubscribeResponse, error) {
	out := new(UnSubscribeResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/UnSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	// One stream by client.
	OnEvent(*OnEventRequest, EventService_OnEventServer) error
	// Return from OnEvent.
	Quit(context.Context, *QuitRequest) (*QuitResponse, error)
	// Connect to an event channel or create it if it not already exist
	// and stay in that function until UnSubscribe is call.
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// Disconnect to an event channel.(Return from Subscribe)
	UnSubscribe(context.Context, *UnSubscribeRequest) (*UnSubscribeResponse, error)
	// Publish event on channel.
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) OnEvent(req *OnEventRequest, srv EventService_OnEventServer) error {
	return status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (*UnimplementedEventServiceServer) Quit(ctx context.Context, req *QuitRequest) (*QuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (*UnimplementedEventServiceServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedEventServiceServer) UnSubscribe(ctx context.Context, req *UnSubscribeRequest) (*UnSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribe not implemented")
}
func (*UnimplementedEventServiceServer) Publish(ctx context.Context, req *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_OnEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).OnEvent(m, &eventServiceOnEventServer{stream})
}

type EventService_OnEventServer interface {
	Send(*OnEventResponse) error
	grpc.ServerStream
}

type eventServiceOnEventServer struct {
	grpc.ServerStream
}

func (x *eventServiceOnEventServer) Send(m *OnEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Quit(ctx, req.(*QuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UnSubscribe(ctx, req.(*UnSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quit",
			Handler:    _EventService_Quit_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _EventService_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _EventService_UnSubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _EventService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnEvent",
			Handler:       _EventService_OnEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event/eventpb/event.proto",
}
