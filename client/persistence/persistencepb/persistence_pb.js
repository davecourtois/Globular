/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.persistence.Attribute', null, global);
goog.exportSymbol('proto.persistence.Bool_array', null, global);
goog.exportSymbol('proto.persistence.Entity', null, global);
goog.exportSymbol('proto.persistence.GetEntitiesByTypenameRqst', null, global);
goog.exportSymbol('proto.persistence.GetEntitiesByTypenameRsp', null, global);
goog.exportSymbol('proto.persistence.GetEntityByUuidRqst', null, global);
goog.exportSymbol('proto.persistence.GetEntityByUuidRsp', null, global);
goog.exportSymbol('proto.persistence.Numeric_array', null, global);
goog.exportSymbol('proto.persistence.PersistEntityRqst', null, global);
goog.exportSymbol('proto.persistence.PersistEntityRsp', null, global);
goog.exportSymbol('proto.persistence.Relation', null, global);
goog.exportSymbol('proto.persistence.RelationType', null, global);
goog.exportSymbol('proto.persistence.String_array', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.Bool_array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.persistence.Bool_array.repeatedFields_, null);
};
goog.inherits(proto.persistence.Bool_array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.Bool_array.displayName = 'proto.persistence.Bool_array';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.persistence.Bool_array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.Bool_array.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.Bool_array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.Bool_array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Bool_array.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.Bool_array}
 */
proto.persistence.Bool_array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.Bool_array;
  return proto.persistence.Bool_array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.Bool_array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.Bool_array}
 */
proto.persistence.Bool_array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.Bool_array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.Bool_array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.Bool_array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Bool_array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool values = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.persistence.Bool_array.prototype.getValuesList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<boolean>} value */
proto.persistence.Bool_array.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.persistence.Bool_array.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.persistence.Bool_array.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.Numeric_array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.persistence.Numeric_array.repeatedFields_, null);
};
goog.inherits(proto.persistence.Numeric_array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.Numeric_array.displayName = 'proto.persistence.Numeric_array';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.persistence.Numeric_array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.Numeric_array.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.Numeric_array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.Numeric_array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Numeric_array.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.Numeric_array}
 */
proto.persistence.Numeric_array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.Numeric_array;
  return proto.persistence.Numeric_array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.Numeric_array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.Numeric_array}
 */
proto.persistence.Numeric_array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.Numeric_array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.Numeric_array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.Numeric_array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Numeric_array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double values = 1;
 * @return {!Array<number>}
 */
proto.persistence.Numeric_array.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.persistence.Numeric_array.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.persistence.Numeric_array.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.persistence.Numeric_array.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.String_array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.persistence.String_array.repeatedFields_, null);
};
goog.inherits(proto.persistence.String_array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.String_array.displayName = 'proto.persistence.String_array';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.persistence.String_array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.String_array.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.String_array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.String_array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.String_array.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.String_array}
 */
proto.persistence.String_array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.String_array;
  return proto.persistence.String_array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.String_array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.String_array}
 */
proto.persistence.String_array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.String_array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.String_array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.String_array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.String_array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.persistence.String_array.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.persistence.String_array.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.persistence.String_array.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.persistence.String_array.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.persistence.Attribute.oneofGroups_);
};
goog.inherits(proto.persistence.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.Attribute.displayName = 'proto.persistence.Attribute';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.persistence.Attribute.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.persistence.Attribute.ValueCase = {
  VALUE_NOT_SET: 0,
  STR_VAL: 2,
  STR_ARR: 3,
  BOOL_VAL: 4,
  BOOL_ARR: 5,
  NUMERIC_VAL: 6,
  NUMERIC_ARR: 7
};

/**
 * @return {proto.persistence.Attribute.ValueCase}
 */
proto.persistence.Attribute.prototype.getValueCase = function() {
  return /** @type {proto.persistence.Attribute.ValueCase} */(jspb.Message.computeOneofCase(this, proto.persistence.Attribute.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strVal: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strArr: (f = msg.getStrArr()) && proto.persistence.String_array.toObject(includeInstance, f),
    boolVal: jspb.Message.getFieldWithDefault(msg, 4, false),
    boolArr: (f = msg.getBoolArr()) && proto.persistence.Bool_array.toObject(includeInstance, f),
    numericVal: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    numericArr: (f = msg.getNumericArr()) && proto.persistence.Numeric_array.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.Attribute}
 */
proto.persistence.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.Attribute;
  return proto.persistence.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.Attribute}
 */
proto.persistence.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrVal(value);
      break;
    case 3:
      var value = new proto.persistence.String_array;
      reader.readMessage(value,proto.persistence.String_array.deserializeBinaryFromReader);
      msg.setStrArr(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolVal(value);
      break;
    case 5:
      var value = new proto.persistence.Bool_array;
      reader.readMessage(value,proto.persistence.Bool_array.deserializeBinaryFromReader);
      msg.setBoolArr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumericVal(value);
      break;
    case 7:
      var value = new proto.persistence.Numeric_array;
      reader.readMessage(value,proto.persistence.Numeric_array.deserializeBinaryFromReader);
      msg.setNumericArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrArr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.persistence.String_array.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBoolArr();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.persistence.Bool_array.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getNumericArr();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.persistence.Numeric_array.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.persistence.Attribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.persistence.Attribute.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string str_val = 2;
 * @return {string}
 */
proto.persistence.Attribute.prototype.getStrVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.persistence.Attribute.prototype.setStrVal = function(value) {
  jspb.Message.setOneofField(this, 2, proto.persistence.Attribute.oneofGroups_[0], value);
};


proto.persistence.Attribute.prototype.clearStrVal = function() {
  jspb.Message.setOneofField(this, 2, proto.persistence.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.Attribute.prototype.hasStrVal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional String_array str_arr = 3;
 * @return {?proto.persistence.String_array}
 */
proto.persistence.Attribute.prototype.getStrArr = function() {
  return /** @type{?proto.persistence.String_array} */ (
    jspb.Message.getWrapperField(this, proto.persistence.String_array, 3));
};


/** @param {?proto.persistence.String_array|undefined} value */
proto.persistence.Attribute.prototype.setStrArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.persistence.Attribute.oneofGroups_[0], value);
};


proto.persistence.Attribute.prototype.clearStrArr = function() {
  this.setStrArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.Attribute.prototype.hasStrArr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_val = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.persistence.Attribute.prototype.getBoolVal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.persistence.Attribute.prototype.setBoolVal = function(value) {
  jspb.Message.setOneofField(this, 4, proto.persistence.Attribute.oneofGroups_[0], value);
};


proto.persistence.Attribute.prototype.clearBoolVal = function() {
  jspb.Message.setOneofField(this, 4, proto.persistence.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.Attribute.prototype.hasBoolVal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Bool_array bool_arr = 5;
 * @return {?proto.persistence.Bool_array}
 */
proto.persistence.Attribute.prototype.getBoolArr = function() {
  return /** @type{?proto.persistence.Bool_array} */ (
    jspb.Message.getWrapperField(this, proto.persistence.Bool_array, 5));
};


/** @param {?proto.persistence.Bool_array|undefined} value */
proto.persistence.Attribute.prototype.setBoolArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.persistence.Attribute.oneofGroups_[0], value);
};


proto.persistence.Attribute.prototype.clearBoolArr = function() {
  this.setBoolArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.Attribute.prototype.hasBoolArr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double numeric_val = 6;
 * @return {number}
 */
proto.persistence.Attribute.prototype.getNumericVal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.persistence.Attribute.prototype.setNumericVal = function(value) {
  jspb.Message.setOneofField(this, 6, proto.persistence.Attribute.oneofGroups_[0], value);
};


proto.persistence.Attribute.prototype.clearNumericVal = function() {
  jspb.Message.setOneofField(this, 6, proto.persistence.Attribute.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.Attribute.prototype.hasNumericVal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Numeric_array numeric_arr = 7;
 * @return {?proto.persistence.Numeric_array}
 */
proto.persistence.Attribute.prototype.getNumericArr = function() {
  return /** @type{?proto.persistence.Numeric_array} */ (
    jspb.Message.getWrapperField(this, proto.persistence.Numeric_array, 7));
};


/** @param {?proto.persistence.Numeric_array|undefined} value */
proto.persistence.Attribute.prototype.setNumericArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.persistence.Attribute.oneofGroups_[0], value);
};


proto.persistence.Attribute.prototype.clearNumericArr = function() {
  this.setNumericArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.Attribute.prototype.hasNumericArr = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.Relation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.Relation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.Relation.displayName = 'proto.persistence.Relation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.Relation.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.Relation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.Relation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Relation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    relationtype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.Relation}
 */
proto.persistence.Relation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.Relation;
  return proto.persistence.Relation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.Relation}
 */
proto.persistence.Relation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUrl(value);
      break;
    case 4:
      var value = /** @type {!proto.persistence.RelationType} */ (reader.readEnum());
      msg.setRelationtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.Relation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.Relation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Relation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRelationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.persistence.Relation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.persistence.Relation.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_url = 2;
 * @return {string}
 */
proto.persistence.Relation.prototype.getSourceUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.persistence.Relation.prototype.setSourceUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target_url = 3;
 * @return {string}
 */
proto.persistence.Relation.prototype.getTargetUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.persistence.Relation.prototype.setTargetUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional RelationType relationType = 4;
 * @return {!proto.persistence.RelationType}
 */
proto.persistence.Relation.prototype.getRelationtype = function() {
  return /** @type {!proto.persistence.RelationType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.persistence.RelationType} value */
proto.persistence.Relation.prototype.setRelationtype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.persistence.Entity.repeatedFields_, null);
};
goog.inherits(proto.persistence.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.Entity.displayName = 'proto.persistence.Entity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.persistence.Entity.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    typename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    attibutesList: jspb.Message.toObjectList(msg.getAttibutesList(),
    proto.persistence.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.Entity}
 */
proto.persistence.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.Entity;
  return proto.persistence.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.Entity}
 */
proto.persistence.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = new proto.persistence.Attribute;
      reader.readMessage(value,proto.persistence.Attribute.deserializeBinaryFromReader);
      msg.addAttibutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAttibutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.persistence.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * optional string typename = 1;
 * @return {string}
 */
proto.persistence.Entity.prototype.getTypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.persistence.Entity.prototype.setTypename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string UUID = 2;
 * @return {string}
 */
proto.persistence.Entity.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.persistence.Entity.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.persistence.Entity.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.persistence.Entity.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Attribute attibutes = 4;
 * @return {!Array<!proto.persistence.Attribute>}
 */
proto.persistence.Entity.prototype.getAttibutesList = function() {
  return /** @type{!Array<!proto.persistence.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.persistence.Attribute, 4));
};


/** @param {!Array<!proto.persistence.Attribute>} value */
proto.persistence.Entity.prototype.setAttibutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.persistence.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.persistence.Attribute}
 */
proto.persistence.Entity.prototype.addAttibutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.persistence.Attribute, opt_index);
};


proto.persistence.Entity.prototype.clearAttibutesList = function() {
  this.setAttibutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.PersistEntityRqst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.PersistEntityRqst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.PersistEntityRqst.displayName = 'proto.persistence.PersistEntityRqst';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.PersistEntityRqst.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.PersistEntityRqst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.PersistEntityRqst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.PersistEntityRqst.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.persistence.Entity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.PersistEntityRqst}
 */
proto.persistence.PersistEntityRqst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.PersistEntityRqst;
  return proto.persistence.PersistEntityRqst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.PersistEntityRqst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.PersistEntityRqst}
 */
proto.persistence.PersistEntityRqst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.persistence.Entity;
      reader.readMessage(value,proto.persistence.Entity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.PersistEntityRqst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.PersistEntityRqst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.PersistEntityRqst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.PersistEntityRqst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.persistence.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entity entity = 1;
 * @return {?proto.persistence.Entity}
 */
proto.persistence.PersistEntityRqst.prototype.getEntity = function() {
  return /** @type{?proto.persistence.Entity} */ (
    jspb.Message.getWrapperField(this, proto.persistence.Entity, 1));
};


/** @param {?proto.persistence.Entity|undefined} value */
proto.persistence.PersistEntityRqst.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.persistence.PersistEntityRqst.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.PersistEntityRqst.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.PersistEntityRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.PersistEntityRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.PersistEntityRsp.displayName = 'proto.persistence.PersistEntityRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.PersistEntityRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.PersistEntityRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.PersistEntityRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.PersistEntityRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.PersistEntityRsp}
 */
proto.persistence.PersistEntityRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.PersistEntityRsp;
  return proto.persistence.PersistEntityRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.PersistEntityRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.PersistEntityRsp}
 */
proto.persistence.PersistEntityRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.PersistEntityRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.PersistEntityRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.PersistEntityRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.PersistEntityRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.persistence.PersistEntityRsp.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.persistence.PersistEntityRsp.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.GetEntityByUuidRqst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.GetEntityByUuidRqst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.GetEntityByUuidRqst.displayName = 'proto.persistence.GetEntityByUuidRqst';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.GetEntityByUuidRqst.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.GetEntityByUuidRqst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.GetEntityByUuidRqst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntityByUuidRqst.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.GetEntityByUuidRqst}
 */
proto.persistence.GetEntityByUuidRqst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.GetEntityByUuidRqst;
  return proto.persistence.GetEntityByUuidRqst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.GetEntityByUuidRqst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.GetEntityByUuidRqst}
 */
proto.persistence.GetEntityByUuidRqst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.GetEntityByUuidRqst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.GetEntityByUuidRqst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.GetEntityByUuidRqst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntityByUuidRqst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.persistence.GetEntityByUuidRqst.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.persistence.GetEntityByUuidRqst.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string typename = 2;
 * @return {string}
 */
proto.persistence.GetEntityByUuidRqst.prototype.getTypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.persistence.GetEntityByUuidRqst.prototype.setTypename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.GetEntityByUuidRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.GetEntityByUuidRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.GetEntityByUuidRsp.displayName = 'proto.persistence.GetEntityByUuidRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.GetEntityByUuidRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.GetEntityByUuidRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.GetEntityByUuidRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntityByUuidRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.persistence.Entity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.GetEntityByUuidRsp}
 */
proto.persistence.GetEntityByUuidRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.GetEntityByUuidRsp;
  return proto.persistence.GetEntityByUuidRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.GetEntityByUuidRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.GetEntityByUuidRsp}
 */
proto.persistence.GetEntityByUuidRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.persistence.Entity;
      reader.readMessage(value,proto.persistence.Entity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.GetEntityByUuidRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.GetEntityByUuidRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.GetEntityByUuidRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntityByUuidRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.persistence.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entity entity = 1;
 * @return {?proto.persistence.Entity}
 */
proto.persistence.GetEntityByUuidRsp.prototype.getEntity = function() {
  return /** @type{?proto.persistence.Entity} */ (
    jspb.Message.getWrapperField(this, proto.persistence.Entity, 1));
};


/** @param {?proto.persistence.Entity|undefined} value */
proto.persistence.GetEntityByUuidRsp.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.persistence.GetEntityByUuidRsp.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.GetEntityByUuidRsp.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.GetEntitiesByTypenameRqst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.GetEntitiesByTypenameRqst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.GetEntitiesByTypenameRqst.displayName = 'proto.persistence.GetEntitiesByTypenameRqst';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.GetEntitiesByTypenameRqst.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.GetEntitiesByTypenameRqst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.GetEntitiesByTypenameRqst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntitiesByTypenameRqst.toObject = function(includeInstance, msg) {
  var f, obj = {
    typename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.GetEntitiesByTypenameRqst}
 */
proto.persistence.GetEntitiesByTypenameRqst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.GetEntitiesByTypenameRqst;
  return proto.persistence.GetEntitiesByTypenameRqst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.GetEntitiesByTypenameRqst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.GetEntitiesByTypenameRqst}
 */
proto.persistence.GetEntitiesByTypenameRqst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.GetEntitiesByTypenameRqst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.GetEntitiesByTypenameRqst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.GetEntitiesByTypenameRqst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntitiesByTypenameRqst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string typename = 1;
 * @return {string}
 */
proto.persistence.GetEntitiesByTypenameRqst.prototype.getTypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.persistence.GetEntitiesByTypenameRqst.prototype.setTypename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.persistence.GetEntitiesByTypenameRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.persistence.GetEntitiesByTypenameRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.persistence.GetEntitiesByTypenameRsp.displayName = 'proto.persistence.GetEntitiesByTypenameRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.persistence.GetEntitiesByTypenameRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.persistence.GetEntitiesByTypenameRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.persistence.GetEntitiesByTypenameRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntitiesByTypenameRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.persistence.Entity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.persistence.GetEntitiesByTypenameRsp}
 */
proto.persistence.GetEntitiesByTypenameRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.persistence.GetEntitiesByTypenameRsp;
  return proto.persistence.GetEntitiesByTypenameRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.persistence.GetEntitiesByTypenameRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.persistence.GetEntitiesByTypenameRsp}
 */
proto.persistence.GetEntitiesByTypenameRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.persistence.Entity;
      reader.readMessage(value,proto.persistence.Entity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.persistence.GetEntitiesByTypenameRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.persistence.GetEntitiesByTypenameRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.persistence.GetEntitiesByTypenameRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.persistence.GetEntitiesByTypenameRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.persistence.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entity entity = 1;
 * @return {?proto.persistence.Entity}
 */
proto.persistence.GetEntitiesByTypenameRsp.prototype.getEntity = function() {
  return /** @type{?proto.persistence.Entity} */ (
    jspb.Message.getWrapperField(this, proto.persistence.Entity, 1));
};


/** @param {?proto.persistence.Entity|undefined} value */
proto.persistence.GetEntitiesByTypenameRsp.prototype.setEntity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.persistence.GetEntitiesByTypenameRsp.prototype.clearEntity = function() {
  this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.persistence.GetEntitiesByTypenameRsp.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.persistence.RelationType = {
  AGGREGATION: 0,
  COMPOSITION: 1
};

goog.object.extend(exports, proto.persistence);
