/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.catalog.Connection', null, global);
goog.exportSymbol('proto.catalog.CreateConnectionRqst', null, global);
goog.exportSymbol('proto.catalog.CreateConnectionRsp', null, global);
goog.exportSymbol('proto.catalog.DeleteConnectionRqst', null, global);
goog.exportSymbol('proto.catalog.DeleteConnectionRsp', null, global);
goog.exportSymbol('proto.catalog.Dimension', null, global);
goog.exportSymbol('proto.catalog.ItemDefinition', null, global);
goog.exportSymbol('proto.catalog.ItemInstance', null, global);
goog.exportSymbol('proto.catalog.Language', null, global);
goog.exportSymbol('proto.catalog.PropertyDefinition', null, global);
goog.exportSymbol('proto.catalog.PropertyDefinition.Type', null, global);
goog.exportSymbol('proto.catalog.PropertyDefinitions', null, global);
goog.exportSymbol('proto.catalog.PropertyValue', null, global);
goog.exportSymbol('proto.catalog.PropertyValue.Booleans', null, global);
goog.exportSymbol('proto.catalog.PropertyValue.Dimensions', null, global);
goog.exportSymbol('proto.catalog.PropertyValue.Numerics', null, global);
goog.exportSymbol('proto.catalog.PropertyValue.Strings', null, global);
goog.exportSymbol('proto.catalog.Reference', null, global);
goog.exportSymbol('proto.catalog.References', null, global);
goog.exportSymbol('proto.catalog.SaveItemDefinitionRequest', null, global);
goog.exportSymbol('proto.catalog.SaveItemDefinitionResponse', null, global);
goog.exportSymbol('proto.catalog.SaveItemInstanceRequest', null, global);
goog.exportSymbol('proto.catalog.SaveItemInstanceResponse', null, global);
goog.exportSymbol('proto.catalog.SavePropertyDefinitionRequest', null, global);
goog.exportSymbol('proto.catalog.SavePropertyDefinitionResponse', null, global);
goog.exportSymbol('proto.catalog.SaveUnitOfMesureRequest', null, global);
goog.exportSymbol('proto.catalog.SaveUnitOfMesureResponse', null, global);
goog.exportSymbol('proto.catalog.StoreType', null, global);
goog.exportSymbol('proto.catalog.UnitOfMeasure', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.Reference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.Reference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.Reference.displayName = 'proto.catalog.Reference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.References = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.References.repeatedFields_, null);
};
goog.inherits(proto.catalog.References, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.References.displayName = 'proto.catalog.References';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.Connection.displayName = 'proto.catalog.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.CreateConnectionRqst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.CreateConnectionRqst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.CreateConnectionRqst.displayName = 'proto.catalog.CreateConnectionRqst';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.CreateConnectionRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.CreateConnectionRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.CreateConnectionRsp.displayName = 'proto.catalog.CreateConnectionRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.DeleteConnectionRqst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.DeleteConnectionRqst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.DeleteConnectionRqst.displayName = 'proto.catalog.DeleteConnectionRqst';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.DeleteConnectionRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.DeleteConnectionRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.DeleteConnectionRsp.displayName = 'proto.catalog.DeleteConnectionRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.Language.displayName = 'proto.catalog.Language';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.PropertyDefinition.repeatedFields_, null);
};
goog.inherits(proto.catalog.PropertyDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyDefinition.displayName = 'proto.catalog.PropertyDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyDefinitions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.PropertyDefinitions.repeatedFields_, null);
};
goog.inherits(proto.catalog.PropertyDefinitions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyDefinitions.displayName = 'proto.catalog.PropertyDefinitions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.ItemDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.ItemDefinition.repeatedFields_, null);
};
goog.inherits(proto.catalog.ItemDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.ItemDefinition.displayName = 'proto.catalog.ItemDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.UnitOfMeasure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.UnitOfMeasure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.UnitOfMeasure.displayName = 'proto.catalog.UnitOfMeasure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.Dimension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.Dimension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.Dimension.displayName = 'proto.catalog.Dimension';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.catalog.PropertyValue.oneofGroups_);
};
goog.inherits(proto.catalog.PropertyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyValue.displayName = 'proto.catalog.PropertyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyValue.Booleans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.PropertyValue.Booleans.repeatedFields_, null);
};
goog.inherits(proto.catalog.PropertyValue.Booleans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyValue.Booleans.displayName = 'proto.catalog.PropertyValue.Booleans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyValue.Numerics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.PropertyValue.Numerics.repeatedFields_, null);
};
goog.inherits(proto.catalog.PropertyValue.Numerics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyValue.Numerics.displayName = 'proto.catalog.PropertyValue.Numerics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyValue.Strings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.PropertyValue.Strings.repeatedFields_, null);
};
goog.inherits(proto.catalog.PropertyValue.Strings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyValue.Strings.displayName = 'proto.catalog.PropertyValue.Strings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.PropertyValue.Dimensions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.PropertyValue.Dimensions.repeatedFields_, null);
};
goog.inherits(proto.catalog.PropertyValue.Dimensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.PropertyValue.Dimensions.displayName = 'proto.catalog.PropertyValue.Dimensions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.ItemInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.catalog.ItemInstance.repeatedFields_, null);
};
goog.inherits(proto.catalog.ItemInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.ItemInstance.displayName = 'proto.catalog.ItemInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SaveUnitOfMesureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SaveUnitOfMesureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SaveUnitOfMesureRequest.displayName = 'proto.catalog.SaveUnitOfMesureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SaveUnitOfMesureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SaveUnitOfMesureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SaveUnitOfMesureResponse.displayName = 'proto.catalog.SaveUnitOfMesureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SavePropertyDefinitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SavePropertyDefinitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SavePropertyDefinitionRequest.displayName = 'proto.catalog.SavePropertyDefinitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SavePropertyDefinitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SavePropertyDefinitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SavePropertyDefinitionResponse.displayName = 'proto.catalog.SavePropertyDefinitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SaveItemDefinitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SaveItemDefinitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SaveItemDefinitionRequest.displayName = 'proto.catalog.SaveItemDefinitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SaveItemDefinitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SaveItemDefinitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SaveItemDefinitionResponse.displayName = 'proto.catalog.SaveItemDefinitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SaveItemInstanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SaveItemInstanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SaveItemInstanceRequest.displayName = 'proto.catalog.SaveItemInstanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.catalog.SaveItemInstanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.catalog.SaveItemInstanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.catalog.SaveItemInstanceResponse.displayName = 'proto.catalog.SaveItemInstanceResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.Reference.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.Reference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.Reference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Reference.toObject = function(includeInstance, msg) {
  var f, obj = {
    refdbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    refobjid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.Reference}
 */
proto.catalog.Reference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.Reference;
  return proto.catalog.Reference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.Reference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.Reference}
 */
proto.catalog.Reference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefdbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefobjid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.Reference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.Reference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.Reference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Reference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefdbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRefobjid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string refDbName = 1;
 * @return {string}
 */
proto.catalog.Reference.prototype.getRefdbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.Reference.prototype.setRefdbname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string refObjId = 2;
 * @return {string}
 */
proto.catalog.Reference.prototype.getRefobjid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.Reference.prototype.setRefobjid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.References.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.References.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.References.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.References} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.References.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.catalog.Reference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.References}
 */
proto.catalog.References.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.References;
  return proto.catalog.References.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.References} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.References}
 */
proto.catalog.References.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.catalog.Reference;
      reader.readMessage(value,proto.catalog.Reference.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.References.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.References.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.References} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.References.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.catalog.Reference.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Reference values = 1;
 * @return {!Array<!proto.catalog.Reference>}
 */
proto.catalog.References.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.catalog.Reference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.catalog.Reference, 1));
};


/** @param {!Array<!proto.catalog.Reference>} value */
proto.catalog.References.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.catalog.Reference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.catalog.Reference}
 */
proto.catalog.References.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.catalog.Reference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.References.prototype.clearValuesList = function() {
  this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    host: jspb.Message.getFieldWithDefault(msg, 3, ""),
    store: jspb.Message.getFieldWithDefault(msg, 5, 0),
    user: jspb.Message.getFieldWithDefault(msg, 6, ""),
    password: jspb.Message.getFieldWithDefault(msg, 7, ""),
    port: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 9, 0),
    options: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.Connection}
 */
proto.catalog.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.Connection;
  return proto.catalog.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.Connection}
 */
proto.catalog.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 5:
      var value = /** @type {!proto.catalog.StoreType} */ (reader.readEnum());
      msg.setStore(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStore();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getOptions();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.Connection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.Connection.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.catalog.Connection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.Connection.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string host = 3;
 * @return {string}
 */
proto.catalog.Connection.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.catalog.Connection.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional StoreType store = 5;
 * @return {!proto.catalog.StoreType}
 */
proto.catalog.Connection.prototype.getStore = function() {
  return /** @type {!proto.catalog.StoreType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.catalog.StoreType} value */
proto.catalog.Connection.prototype.setStore = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string user = 6;
 * @return {string}
 */
proto.catalog.Connection.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.catalog.Connection.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string password = 7;
 * @return {string}
 */
proto.catalog.Connection.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.catalog.Connection.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 port = 8;
 * @return {number}
 */
proto.catalog.Connection.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.catalog.Connection.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 timeout = 9;
 * @return {number}
 */
proto.catalog.Connection.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.catalog.Connection.prototype.setTimeout = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string options = 10;
 * @return {string}
 */
proto.catalog.Connection.prototype.getOptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.catalog.Connection.prototype.setOptions = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.CreateConnectionRqst.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.CreateConnectionRqst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.CreateConnectionRqst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.CreateConnectionRqst.toObject = function(includeInstance, msg) {
  var f, obj = {
    connection: (f = msg.getConnection()) && proto.catalog.Connection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.CreateConnectionRqst}
 */
proto.catalog.CreateConnectionRqst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.CreateConnectionRqst;
  return proto.catalog.CreateConnectionRqst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.CreateConnectionRqst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.CreateConnectionRqst}
 */
proto.catalog.CreateConnectionRqst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.catalog.Connection;
      reader.readMessage(value,proto.catalog.Connection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.CreateConnectionRqst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.CreateConnectionRqst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.CreateConnectionRqst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.CreateConnectionRqst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.catalog.Connection.serializeBinaryToWriter
    );
  }
};


/**
 * optional Connection connection = 1;
 * @return {?proto.catalog.Connection}
 */
proto.catalog.CreateConnectionRqst.prototype.getConnection = function() {
  return /** @type{?proto.catalog.Connection} */ (
    jspb.Message.getWrapperField(this, proto.catalog.Connection, 1));
};


/** @param {?proto.catalog.Connection|undefined} value */
proto.catalog.CreateConnectionRqst.prototype.setConnection = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.CreateConnectionRqst.prototype.clearConnection = function() {
  this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.CreateConnectionRqst.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.CreateConnectionRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.CreateConnectionRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.CreateConnectionRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.CreateConnectionRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.CreateConnectionRsp}
 */
proto.catalog.CreateConnectionRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.CreateConnectionRsp;
  return proto.catalog.CreateConnectionRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.CreateConnectionRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.CreateConnectionRsp}
 */
proto.catalog.CreateConnectionRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.CreateConnectionRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.CreateConnectionRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.CreateConnectionRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.CreateConnectionRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool result = 1;
 * @return {boolean}
 */
proto.catalog.CreateConnectionRsp.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.catalog.CreateConnectionRsp.prototype.setResult = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.DeleteConnectionRqst.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.DeleteConnectionRqst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.DeleteConnectionRqst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.DeleteConnectionRqst.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.DeleteConnectionRqst}
 */
proto.catalog.DeleteConnectionRqst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.DeleteConnectionRqst;
  return proto.catalog.DeleteConnectionRqst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.DeleteConnectionRqst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.DeleteConnectionRqst}
 */
proto.catalog.DeleteConnectionRqst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.DeleteConnectionRqst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.DeleteConnectionRqst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.DeleteConnectionRqst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.DeleteConnectionRqst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.DeleteConnectionRqst.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.DeleteConnectionRqst.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.DeleteConnectionRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.DeleteConnectionRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.DeleteConnectionRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.DeleteConnectionRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.DeleteConnectionRsp}
 */
proto.catalog.DeleteConnectionRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.DeleteConnectionRsp;
  return proto.catalog.DeleteConnectionRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.DeleteConnectionRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.DeleteConnectionRsp}
 */
proto.catalog.DeleteConnectionRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.DeleteConnectionRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.DeleteConnectionRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.DeleteConnectionRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.DeleteConnectionRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool result = 1;
 * @return {boolean}
 */
proto.catalog.DeleteConnectionRsp.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.catalog.DeleteConnectionRsp.prototype.setResult = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.Language}
 */
proto.catalog.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.Language;
  return proto.catalog.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.Language}
 */
proto.catalog.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.catalog.Language.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.Language.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.catalog.Language.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.Language.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.PropertyDefinition.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languagecode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    abreviation: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    properties: (f = msg.getProperties()) && proto.catalog.PropertyDefinitions.toObject(includeInstance, f),
    propertiesids: (f = msg.getPropertiesids()) && proto.catalog.References.toObject(includeInstance, f),
    choicesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyDefinition}
 */
proto.catalog.PropertyDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyDefinition;
  return proto.catalog.PropertyDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyDefinition}
 */
proto.catalog.PropertyDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagecode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbreviation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {!proto.catalog.PropertyDefinition.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = new proto.catalog.PropertyDefinitions;
      reader.readMessage(value,proto.catalog.PropertyDefinitions.deserializeBinaryFromReader);
      msg.setProperties(value);
      break;
    case 8:
      var value = new proto.catalog.References;
      reader.readMessage(value,proto.catalog.References.deserializeBinaryFromReader);
      msg.setPropertiesids(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguagecode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAbreviation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getProperties();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.catalog.PropertyDefinitions.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesids();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.catalog.References.serializeBinaryToWriter
    );
  }
  f = message.getChoicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.catalog.PropertyDefinition.Type = {
  NUMERICAL: 0,
  TEXTUAL: 1,
  BOOLEAN: 2,
  DIMENTIONAL: 3,
  ENUMERATION: 4,
  AGGREGATE: 5
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.PropertyDefinition.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.PropertyDefinition.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageCode = 2;
 * @return {string}
 */
proto.catalog.PropertyDefinition.prototype.getLanguagecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.PropertyDefinition.prototype.setLanguagecode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.catalog.PropertyDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.catalog.PropertyDefinition.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string abreviation = 4;
 * @return {string}
 */
proto.catalog.PropertyDefinition.prototype.getAbreviation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.catalog.PropertyDefinition.prototype.setAbreviation = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.catalog.PropertyDefinition.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.catalog.PropertyDefinition.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Type type = 6;
 * @return {!proto.catalog.PropertyDefinition.Type}
 */
proto.catalog.PropertyDefinition.prototype.getType = function() {
  return /** @type {!proto.catalog.PropertyDefinition.Type} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.catalog.PropertyDefinition.Type} value */
proto.catalog.PropertyDefinition.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional PropertyDefinitions properties = 7;
 * @return {?proto.catalog.PropertyDefinitions}
 */
proto.catalog.PropertyDefinition.prototype.getProperties = function() {
  return /** @type{?proto.catalog.PropertyDefinitions} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyDefinitions, 7));
};


/** @param {?proto.catalog.PropertyDefinitions|undefined} value */
proto.catalog.PropertyDefinition.prototype.setProperties = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyDefinition.prototype.clearProperties = function() {
  this.setProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyDefinition.prototype.hasProperties = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional References propertiesIds = 8;
 * @return {?proto.catalog.References}
 */
proto.catalog.PropertyDefinition.prototype.getPropertiesids = function() {
  return /** @type{?proto.catalog.References} */ (
    jspb.Message.getWrapperField(this, proto.catalog.References, 8));
};


/** @param {?proto.catalog.References|undefined} value */
proto.catalog.PropertyDefinition.prototype.setPropertiesids = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyDefinition.prototype.clearPropertiesids = function() {
  this.setPropertiesids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyDefinition.prototype.hasPropertiesids = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated string choices = 9;
 * @return {!Array<string>}
 */
proto.catalog.PropertyDefinition.prototype.getChoicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.catalog.PropertyDefinition.prototype.setChoicesList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.catalog.PropertyDefinition.prototype.addChoices = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.PropertyDefinition.prototype.clearChoicesList = function() {
  this.setChoicesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.PropertyDefinitions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyDefinitions.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyDefinitions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyDefinitions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyDefinitions.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.catalog.PropertyDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyDefinitions}
 */
proto.catalog.PropertyDefinitions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyDefinitions;
  return proto.catalog.PropertyDefinitions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyDefinitions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyDefinitions}
 */
proto.catalog.PropertyDefinitions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.catalog.PropertyDefinition;
      reader.readMessage(value,proto.catalog.PropertyDefinition.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyDefinitions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyDefinitions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyDefinitions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyDefinitions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.catalog.PropertyDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PropertyDefinition values = 1;
 * @return {!Array<!proto.catalog.PropertyDefinition>}
 */
proto.catalog.PropertyDefinitions.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.catalog.PropertyDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.catalog.PropertyDefinition, 1));
};


/** @param {!Array<!proto.catalog.PropertyDefinition>} value */
proto.catalog.PropertyDefinitions.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.catalog.PropertyDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.catalog.PropertyDefinition}
 */
proto.catalog.PropertyDefinitions.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.catalog.PropertyDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.PropertyDefinitions.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.ItemDefinition.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.ItemDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.ItemDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.ItemDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.ItemDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languagecode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    abreviation: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    aliasList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    keywordsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    properties: (f = msg.getProperties()) && proto.catalog.PropertyDefinitions.toObject(includeInstance, f),
    propertiesids: (f = msg.getPropertiesids()) && proto.catalog.References.toObject(includeInstance, f),
    releadeditemdefintionsrefs: (f = msg.getReleadeditemdefintionsrefs()) && proto.catalog.References.toObject(includeInstance, f),
    equivalentsitemdefintionsrefs: (f = msg.getEquivalentsitemdefintionsrefs()) && proto.catalog.References.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.ItemDefinition}
 */
proto.catalog.ItemDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.ItemDefinition;
  return proto.catalog.ItemDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.ItemDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.ItemDefinition}
 */
proto.catalog.ItemDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagecode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbreviation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlias(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeywords(value);
      break;
    case 8:
      var value = new proto.catalog.PropertyDefinitions;
      reader.readMessage(value,proto.catalog.PropertyDefinitions.deserializeBinaryFromReader);
      msg.setProperties(value);
      break;
    case 9:
      var value = new proto.catalog.References;
      reader.readMessage(value,proto.catalog.References.deserializeBinaryFromReader);
      msg.setPropertiesids(value);
      break;
    case 10:
      var value = new proto.catalog.References;
      reader.readMessage(value,proto.catalog.References.deserializeBinaryFromReader);
      msg.setReleadeditemdefintionsrefs(value);
      break;
    case 11:
      var value = new proto.catalog.References;
      reader.readMessage(value,proto.catalog.References.deserializeBinaryFromReader);
      msg.setEquivalentsitemdefintionsrefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.ItemDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.ItemDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.ItemDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.ItemDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguagecode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAbreviation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAliasList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getProperties();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.catalog.PropertyDefinitions.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesids();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.catalog.References.serializeBinaryToWriter
    );
  }
  f = message.getReleadeditemdefintionsrefs();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.catalog.References.serializeBinaryToWriter
    );
  }
  f = message.getEquivalentsitemdefintionsrefs();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.catalog.References.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.ItemDefinition.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.ItemDefinition.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageCode = 2;
 * @return {string}
 */
proto.catalog.ItemDefinition.prototype.getLanguagecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.ItemDefinition.prototype.setLanguagecode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.catalog.ItemDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.catalog.ItemDefinition.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string abreviation = 4;
 * @return {string}
 */
proto.catalog.ItemDefinition.prototype.getAbreviation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.catalog.ItemDefinition.prototype.setAbreviation = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.catalog.ItemDefinition.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.catalog.ItemDefinition.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string alias = 6;
 * @return {!Array<string>}
 */
proto.catalog.ItemDefinition.prototype.getAliasList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.catalog.ItemDefinition.prototype.setAliasList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.catalog.ItemDefinition.prototype.addAlias = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.ItemDefinition.prototype.clearAliasList = function() {
  this.setAliasList([]);
};


/**
 * repeated string keyWords = 7;
 * @return {!Array<string>}
 */
proto.catalog.ItemDefinition.prototype.getKeywordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.catalog.ItemDefinition.prototype.setKeywordsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.catalog.ItemDefinition.prototype.addKeywords = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.ItemDefinition.prototype.clearKeywordsList = function() {
  this.setKeywordsList([]);
};


/**
 * optional PropertyDefinitions properties = 8;
 * @return {?proto.catalog.PropertyDefinitions}
 */
proto.catalog.ItemDefinition.prototype.getProperties = function() {
  return /** @type{?proto.catalog.PropertyDefinitions} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyDefinitions, 8));
};


/** @param {?proto.catalog.PropertyDefinitions|undefined} value */
proto.catalog.ItemDefinition.prototype.setProperties = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.ItemDefinition.prototype.clearProperties = function() {
  this.setProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.ItemDefinition.prototype.hasProperties = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional References propertiesIds = 9;
 * @return {?proto.catalog.References}
 */
proto.catalog.ItemDefinition.prototype.getPropertiesids = function() {
  return /** @type{?proto.catalog.References} */ (
    jspb.Message.getWrapperField(this, proto.catalog.References, 9));
};


/** @param {?proto.catalog.References|undefined} value */
proto.catalog.ItemDefinition.prototype.setPropertiesids = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.ItemDefinition.prototype.clearPropertiesids = function() {
  this.setPropertiesids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.ItemDefinition.prototype.hasPropertiesids = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional References releadedItemDefintionsRefs = 10;
 * @return {?proto.catalog.References}
 */
proto.catalog.ItemDefinition.prototype.getReleadeditemdefintionsrefs = function() {
  return /** @type{?proto.catalog.References} */ (
    jspb.Message.getWrapperField(this, proto.catalog.References, 10));
};


/** @param {?proto.catalog.References|undefined} value */
proto.catalog.ItemDefinition.prototype.setReleadeditemdefintionsrefs = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.ItemDefinition.prototype.clearReleadeditemdefintionsrefs = function() {
  this.setReleadeditemdefintionsrefs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.ItemDefinition.prototype.hasReleadeditemdefintionsrefs = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional References equivalentsItemDefintionsRefs = 11;
 * @return {?proto.catalog.References}
 */
proto.catalog.ItemDefinition.prototype.getEquivalentsitemdefintionsrefs = function() {
  return /** @type{?proto.catalog.References} */ (
    jspb.Message.getWrapperField(this, proto.catalog.References, 11));
};


/** @param {?proto.catalog.References|undefined} value */
proto.catalog.ItemDefinition.prototype.setEquivalentsitemdefintionsrefs = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.ItemDefinition.prototype.clearEquivalentsitemdefintionsrefs = function() {
  this.setEquivalentsitemdefintionsrefs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.ItemDefinition.prototype.hasEquivalentsitemdefintionsrefs = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.UnitOfMeasure.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.UnitOfMeasure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.UnitOfMeasure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.UnitOfMeasure.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languagecode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    abreviation: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.UnitOfMeasure}
 */
proto.catalog.UnitOfMeasure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.UnitOfMeasure;
  return proto.catalog.UnitOfMeasure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.UnitOfMeasure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.UnitOfMeasure}
 */
proto.catalog.UnitOfMeasure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagecode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbreviation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.UnitOfMeasure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.UnitOfMeasure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.UnitOfMeasure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.UnitOfMeasure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguagecode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAbreviation();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.UnitOfMeasure.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.UnitOfMeasure.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageCode = 3;
 * @return {string}
 */
proto.catalog.UnitOfMeasure.prototype.getLanguagecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.catalog.UnitOfMeasure.prototype.setLanguagecode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.catalog.UnitOfMeasure.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.catalog.UnitOfMeasure.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string abreviation = 5;
 * @return {string}
 */
proto.catalog.UnitOfMeasure.prototype.getAbreviation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.catalog.UnitOfMeasure.prototype.setAbreviation = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.catalog.UnitOfMeasure.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.catalog.UnitOfMeasure.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.Dimension.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.Dimension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.Dimension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Dimension.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.Dimension}
 */
proto.catalog.Dimension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.Dimension;
  return proto.catalog.Dimension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.Dimension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.Dimension}
 */
proto.catalog.Dimension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.Dimension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.Dimension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.Dimension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.Dimension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string unitId = 1;
 * @return {string}
 */
proto.catalog.Dimension.prototype.getUnitid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.Dimension.prototype.setUnitid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.catalog.Dimension.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.catalog.Dimension.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.catalog.PropertyValue.oneofGroups_ = [[3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.catalog.PropertyValue.ValueCase = {
  VALUE_NOT_SET: 0,
  DIMENSION_VAL: 3,
  TEXT_VAL: 4,
  NUMBER_VAL: 5,
  BOOLEAN_VAL: 6,
  DIMENSION_ARR: 7,
  TEXT_ARR: 8,
  NUMBER_ARR: 9,
  BOOLEAN_ARR: 10
};

/**
 * @return {proto.catalog.PropertyValue.ValueCase}
 */
proto.catalog.PropertyValue.prototype.getValueCase = function() {
  return /** @type {proto.catalog.PropertyValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.catalog.PropertyValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertydefinitionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languagecode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dimensionVal: (f = msg.getDimensionVal()) && proto.catalog.Dimension.toObject(includeInstance, f),
    textVal: jspb.Message.getFieldWithDefault(msg, 4, ""),
    numberVal: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    booleanVal: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    dimensionArr: (f = msg.getDimensionArr()) && proto.catalog.PropertyValue.Dimensions.toObject(includeInstance, f),
    textArr: (f = msg.getTextArr()) && proto.catalog.PropertyValue.Strings.toObject(includeInstance, f),
    numberArr: (f = msg.getNumberArr()) && proto.catalog.PropertyValue.Numerics.toObject(includeInstance, f),
    booleanArr: (f = msg.getBooleanArr()) && proto.catalog.PropertyValue.Booleans.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyValue}
 */
proto.catalog.PropertyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyValue;
  return proto.catalog.PropertyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyValue}
 */
proto.catalog.PropertyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertydefinitionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagecode(value);
      break;
    case 3:
      var value = new proto.catalog.Dimension;
      reader.readMessage(value,proto.catalog.Dimension.deserializeBinaryFromReader);
      msg.setDimensionVal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextVal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumberVal(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanVal(value);
      break;
    case 7:
      var value = new proto.catalog.PropertyValue.Dimensions;
      reader.readMessage(value,proto.catalog.PropertyValue.Dimensions.deserializeBinaryFromReader);
      msg.setDimensionArr(value);
      break;
    case 8:
      var value = new proto.catalog.PropertyValue.Strings;
      reader.readMessage(value,proto.catalog.PropertyValue.Strings.deserializeBinaryFromReader);
      msg.setTextArr(value);
      break;
    case 9:
      var value = new proto.catalog.PropertyValue.Numerics;
      reader.readMessage(value,proto.catalog.PropertyValue.Numerics.deserializeBinaryFromReader);
      msg.setNumberArr(value);
      break;
    case 10:
      var value = new proto.catalog.PropertyValue.Booleans;
      reader.readMessage(value,proto.catalog.PropertyValue.Booleans.deserializeBinaryFromReader);
      msg.setBooleanArr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertydefinitionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguagecode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDimensionVal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.catalog.Dimension.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDimensionArr();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.catalog.PropertyValue.Dimensions.serializeBinaryToWriter
    );
  }
  f = message.getTextArr();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.catalog.PropertyValue.Strings.serializeBinaryToWriter
    );
  }
  f = message.getNumberArr();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.catalog.PropertyValue.Numerics.serializeBinaryToWriter
    );
  }
  f = message.getBooleanArr();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.catalog.PropertyValue.Booleans.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.PropertyValue.Booleans.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyValue.Booleans.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyValue.Booleans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyValue.Booleans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Booleans.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyValue.Booleans}
 */
proto.catalog.PropertyValue.Booleans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyValue.Booleans;
  return proto.catalog.PropertyValue.Booleans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyValue.Booleans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyValue.Booleans}
 */
proto.catalog.PropertyValue.Booleans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyValue.Booleans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyValue.Booleans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyValue.Booleans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Booleans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool values = 1;
 * @return {!Array<boolean>}
 */
proto.catalog.PropertyValue.Booleans.prototype.getValuesList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 1));
};


/** @param {!Array<boolean>} value */
proto.catalog.PropertyValue.Booleans.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 */
proto.catalog.PropertyValue.Booleans.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.PropertyValue.Booleans.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.PropertyValue.Numerics.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyValue.Numerics.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyValue.Numerics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyValue.Numerics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Numerics.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyValue.Numerics}
 */
proto.catalog.PropertyValue.Numerics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyValue.Numerics;
  return proto.catalog.PropertyValue.Numerics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyValue.Numerics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyValue.Numerics}
 */
proto.catalog.PropertyValue.Numerics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyValue.Numerics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyValue.Numerics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyValue.Numerics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Numerics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double values = 1;
 * @return {!Array<number>}
 */
proto.catalog.PropertyValue.Numerics.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.catalog.PropertyValue.Numerics.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.catalog.PropertyValue.Numerics.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.PropertyValue.Numerics.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.PropertyValue.Strings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyValue.Strings.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyValue.Strings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyValue.Strings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Strings.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyValue.Strings}
 */
proto.catalog.PropertyValue.Strings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyValue.Strings;
  return proto.catalog.PropertyValue.Strings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyValue.Strings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyValue.Strings}
 */
proto.catalog.PropertyValue.Strings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyValue.Strings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyValue.Strings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyValue.Strings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Strings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.catalog.PropertyValue.Strings.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.catalog.PropertyValue.Strings.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.catalog.PropertyValue.Strings.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.PropertyValue.Strings.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.PropertyValue.Dimensions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.PropertyValue.Dimensions.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.PropertyValue.Dimensions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.PropertyValue.Dimensions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Dimensions.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.catalog.PropertyValue.Dimensions.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.PropertyValue.Dimensions}
 */
proto.catalog.PropertyValue.Dimensions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.PropertyValue.Dimensions;
  return proto.catalog.PropertyValue.Dimensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.PropertyValue.Dimensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.PropertyValue.Dimensions}
 */
proto.catalog.PropertyValue.Dimensions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.catalog.PropertyValue.Dimensions;
      reader.readMessage(value,proto.catalog.PropertyValue.Dimensions.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.PropertyValue.Dimensions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.PropertyValue.Dimensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.PropertyValue.Dimensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.PropertyValue.Dimensions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.catalog.PropertyValue.Dimensions.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Dimensions values = 1;
 * @return {!Array<!proto.catalog.PropertyValue.Dimensions>}
 */
proto.catalog.PropertyValue.Dimensions.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.catalog.PropertyValue.Dimensions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.catalog.PropertyValue.Dimensions, 1));
};


/** @param {!Array<!proto.catalog.PropertyValue.Dimensions>} value */
proto.catalog.PropertyValue.Dimensions.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.catalog.PropertyValue.Dimensions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.catalog.PropertyValue.Dimensions}
 */
proto.catalog.PropertyValue.Dimensions.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.catalog.PropertyValue.Dimensions, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.PropertyValue.Dimensions.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * optional string propertyDefinitionId = 1;
 * @return {string}
 */
proto.catalog.PropertyValue.prototype.getPropertydefinitionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.PropertyValue.prototype.setPropertydefinitionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageCode = 2;
 * @return {string}
 */
proto.catalog.PropertyValue.prototype.getLanguagecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.PropertyValue.prototype.setLanguagecode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Dimension dimension_val = 3;
 * @return {?proto.catalog.Dimension}
 */
proto.catalog.PropertyValue.prototype.getDimensionVal = function() {
  return /** @type{?proto.catalog.Dimension} */ (
    jspb.Message.getWrapperField(this, proto.catalog.Dimension, 3));
};


/** @param {?proto.catalog.Dimension|undefined} value */
proto.catalog.PropertyValue.prototype.setDimensionVal = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearDimensionVal = function() {
  this.setDimensionVal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasDimensionVal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string text_val = 4;
 * @return {string}
 */
proto.catalog.PropertyValue.prototype.getTextVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.catalog.PropertyValue.prototype.setTextVal = function(value) {
  jspb.Message.setOneofField(this, 4, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearTextVal = function() {
  jspb.Message.setOneofField(this, 4, proto.catalog.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasTextVal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double number_val = 5;
 * @return {number}
 */
proto.catalog.PropertyValue.prototype.getNumberVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.catalog.PropertyValue.prototype.setNumberVal = function(value) {
  jspb.Message.setOneofField(this, 5, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearNumberVal = function() {
  jspb.Message.setOneofField(this, 5, proto.catalog.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasNumberVal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool boolean_val = 6;
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.getBooleanVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.catalog.PropertyValue.prototype.setBooleanVal = function(value) {
  jspb.Message.setOneofField(this, 6, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearBooleanVal = function() {
  jspb.Message.setOneofField(this, 6, proto.catalog.PropertyValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasBooleanVal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Dimensions dimension_arr = 7;
 * @return {?proto.catalog.PropertyValue.Dimensions}
 */
proto.catalog.PropertyValue.prototype.getDimensionArr = function() {
  return /** @type{?proto.catalog.PropertyValue.Dimensions} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyValue.Dimensions, 7));
};


/** @param {?proto.catalog.PropertyValue.Dimensions|undefined} value */
proto.catalog.PropertyValue.prototype.setDimensionArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearDimensionArr = function() {
  this.setDimensionArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasDimensionArr = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Strings text_arr = 8;
 * @return {?proto.catalog.PropertyValue.Strings}
 */
proto.catalog.PropertyValue.prototype.getTextArr = function() {
  return /** @type{?proto.catalog.PropertyValue.Strings} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyValue.Strings, 8));
};


/** @param {?proto.catalog.PropertyValue.Strings|undefined} value */
proto.catalog.PropertyValue.prototype.setTextArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearTextArr = function() {
  this.setTextArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasTextArr = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Numerics number_arr = 9;
 * @return {?proto.catalog.PropertyValue.Numerics}
 */
proto.catalog.PropertyValue.prototype.getNumberArr = function() {
  return /** @type{?proto.catalog.PropertyValue.Numerics} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyValue.Numerics, 9));
};


/** @param {?proto.catalog.PropertyValue.Numerics|undefined} value */
proto.catalog.PropertyValue.prototype.setNumberArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearNumberArr = function() {
  this.setNumberArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasNumberArr = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Booleans boolean_arr = 10;
 * @return {?proto.catalog.PropertyValue.Booleans}
 */
proto.catalog.PropertyValue.prototype.getBooleanArr = function() {
  return /** @type{?proto.catalog.PropertyValue.Booleans} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyValue.Booleans, 10));
};


/** @param {?proto.catalog.PropertyValue.Booleans|undefined} value */
proto.catalog.PropertyValue.prototype.setBooleanArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.catalog.PropertyValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.PropertyValue.prototype.clearBooleanArr = function() {
  this.setBooleanArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.PropertyValue.prototype.hasBooleanArr = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.catalog.ItemInstance.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.ItemInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.ItemInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.ItemInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.ItemInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemdefinitionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.catalog.PropertyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.ItemInstance}
 */
proto.catalog.ItemInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.ItemInstance;
  return proto.catalog.ItemInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.ItemInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.ItemInstance}
 */
proto.catalog.ItemInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemdefinitionid(value);
      break;
    case 3:
      var value = new proto.catalog.PropertyValue;
      reader.readMessage(value,proto.catalog.PropertyValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.ItemInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.ItemInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.ItemInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.ItemInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemdefinitionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.catalog.PropertyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.ItemInstance.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.ItemInstance.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string itemDefinitionId = 2;
 * @return {string}
 */
proto.catalog.ItemInstance.prototype.getItemdefinitionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.catalog.ItemInstance.prototype.setItemdefinitionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PropertyValue values = 3;
 * @return {!Array<!proto.catalog.PropertyValue>}
 */
proto.catalog.ItemInstance.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.catalog.PropertyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.catalog.PropertyValue, 3));
};


/** @param {!Array<!proto.catalog.PropertyValue>} value */
proto.catalog.ItemInstance.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.catalog.PropertyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.catalog.PropertyValue}
 */
proto.catalog.ItemInstance.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.catalog.PropertyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.catalog.ItemInstance.prototype.clearValuesList = function() {
  this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SaveUnitOfMesureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SaveUnitOfMesureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SaveUnitOfMesureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveUnitOfMesureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unitofmeasure: (f = msg.getUnitofmeasure()) && proto.catalog.UnitOfMeasure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SaveUnitOfMesureRequest}
 */
proto.catalog.SaveUnitOfMesureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SaveUnitOfMesureRequest;
  return proto.catalog.SaveUnitOfMesureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SaveUnitOfMesureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SaveUnitOfMesureRequest}
 */
proto.catalog.SaveUnitOfMesureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new proto.catalog.UnitOfMeasure;
      reader.readMessage(value,proto.catalog.UnitOfMeasure.deserializeBinaryFromReader);
      msg.setUnitofmeasure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SaveUnitOfMesureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SaveUnitOfMesureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SaveUnitOfMesureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveUnitOfMesureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnitofmeasure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.catalog.UnitOfMeasure.serializeBinaryToWriter
    );
  }
};


/**
 * optional string connectionId = 1;
 * @return {string}
 */
proto.catalog.SaveUnitOfMesureRequest.prototype.getConnectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SaveUnitOfMesureRequest.prototype.setConnectionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UnitOfMeasure unitOfMeasure = 2;
 * @return {?proto.catalog.UnitOfMeasure}
 */
proto.catalog.SaveUnitOfMesureRequest.prototype.getUnitofmeasure = function() {
  return /** @type{?proto.catalog.UnitOfMeasure} */ (
    jspb.Message.getWrapperField(this, proto.catalog.UnitOfMeasure, 2));
};


/** @param {?proto.catalog.UnitOfMeasure|undefined} value */
proto.catalog.SaveUnitOfMesureRequest.prototype.setUnitofmeasure = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.SaveUnitOfMesureRequest.prototype.clearUnitofmeasure = function() {
  this.setUnitofmeasure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.SaveUnitOfMesureRequest.prototype.hasUnitofmeasure = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SaveUnitOfMesureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SaveUnitOfMesureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SaveUnitOfMesureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveUnitOfMesureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SaveUnitOfMesureResponse}
 */
proto.catalog.SaveUnitOfMesureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SaveUnitOfMesureResponse;
  return proto.catalog.SaveUnitOfMesureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SaveUnitOfMesureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SaveUnitOfMesureResponse}
 */
proto.catalog.SaveUnitOfMesureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SaveUnitOfMesureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SaveUnitOfMesureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SaveUnitOfMesureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveUnitOfMesureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.SaveUnitOfMesureResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SaveUnitOfMesureResponse.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SavePropertyDefinitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SavePropertyDefinitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SavePropertyDefinitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SavePropertyDefinitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertydefinition: (f = msg.getPropertydefinition()) && proto.catalog.PropertyDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SavePropertyDefinitionRequest}
 */
proto.catalog.SavePropertyDefinitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SavePropertyDefinitionRequest;
  return proto.catalog.SavePropertyDefinitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SavePropertyDefinitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SavePropertyDefinitionRequest}
 */
proto.catalog.SavePropertyDefinitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new proto.catalog.PropertyDefinition;
      reader.readMessage(value,proto.catalog.PropertyDefinition.deserializeBinaryFromReader);
      msg.setPropertydefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SavePropertyDefinitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SavePropertyDefinitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SavePropertyDefinitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SavePropertyDefinitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertydefinition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.catalog.PropertyDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string connectionId = 1;
 * @return {string}
 */
proto.catalog.SavePropertyDefinitionRequest.prototype.getConnectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SavePropertyDefinitionRequest.prototype.setConnectionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PropertyDefinition propertyDefinition = 2;
 * @return {?proto.catalog.PropertyDefinition}
 */
proto.catalog.SavePropertyDefinitionRequest.prototype.getPropertydefinition = function() {
  return /** @type{?proto.catalog.PropertyDefinition} */ (
    jspb.Message.getWrapperField(this, proto.catalog.PropertyDefinition, 2));
};


/** @param {?proto.catalog.PropertyDefinition|undefined} value */
proto.catalog.SavePropertyDefinitionRequest.prototype.setPropertydefinition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.SavePropertyDefinitionRequest.prototype.clearPropertydefinition = function() {
  this.setPropertydefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.SavePropertyDefinitionRequest.prototype.hasPropertydefinition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SavePropertyDefinitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SavePropertyDefinitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SavePropertyDefinitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SavePropertyDefinitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SavePropertyDefinitionResponse}
 */
proto.catalog.SavePropertyDefinitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SavePropertyDefinitionResponse;
  return proto.catalog.SavePropertyDefinitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SavePropertyDefinitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SavePropertyDefinitionResponse}
 */
proto.catalog.SavePropertyDefinitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SavePropertyDefinitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SavePropertyDefinitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SavePropertyDefinitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SavePropertyDefinitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.SavePropertyDefinitionResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SavePropertyDefinitionResponse.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SaveItemDefinitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SaveItemDefinitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SaveItemDefinitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemDefinitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemdefinition: (f = msg.getItemdefinition()) && proto.catalog.ItemDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SaveItemDefinitionRequest}
 */
proto.catalog.SaveItemDefinitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SaveItemDefinitionRequest;
  return proto.catalog.SaveItemDefinitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SaveItemDefinitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SaveItemDefinitionRequest}
 */
proto.catalog.SaveItemDefinitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new proto.catalog.ItemDefinition;
      reader.readMessage(value,proto.catalog.ItemDefinition.deserializeBinaryFromReader);
      msg.setItemdefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SaveItemDefinitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SaveItemDefinitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SaveItemDefinitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemDefinitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemdefinition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.catalog.ItemDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string connectionId = 1;
 * @return {string}
 */
proto.catalog.SaveItemDefinitionRequest.prototype.getConnectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SaveItemDefinitionRequest.prototype.setConnectionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ItemDefinition itemDefinition = 2;
 * @return {?proto.catalog.ItemDefinition}
 */
proto.catalog.SaveItemDefinitionRequest.prototype.getItemdefinition = function() {
  return /** @type{?proto.catalog.ItemDefinition} */ (
    jspb.Message.getWrapperField(this, proto.catalog.ItemDefinition, 2));
};


/** @param {?proto.catalog.ItemDefinition|undefined} value */
proto.catalog.SaveItemDefinitionRequest.prototype.setItemdefinition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.SaveItemDefinitionRequest.prototype.clearItemdefinition = function() {
  this.setItemdefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.SaveItemDefinitionRequest.prototype.hasItemdefinition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SaveItemDefinitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SaveItemDefinitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SaveItemDefinitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemDefinitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SaveItemDefinitionResponse}
 */
proto.catalog.SaveItemDefinitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SaveItemDefinitionResponse;
  return proto.catalog.SaveItemDefinitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SaveItemDefinitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SaveItemDefinitionResponse}
 */
proto.catalog.SaveItemDefinitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SaveItemDefinitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SaveItemDefinitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SaveItemDefinitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemDefinitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.SaveItemDefinitionResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SaveItemDefinitionResponse.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SaveItemInstanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SaveItemInstanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SaveItemInstanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemInstanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    iteminstance: (f = msg.getIteminstance()) && proto.catalog.ItemInstance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SaveItemInstanceRequest}
 */
proto.catalog.SaveItemInstanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SaveItemInstanceRequest;
  return proto.catalog.SaveItemInstanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SaveItemInstanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SaveItemInstanceRequest}
 */
proto.catalog.SaveItemInstanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new proto.catalog.ItemInstance;
      reader.readMessage(value,proto.catalog.ItemInstance.deserializeBinaryFromReader);
      msg.setIteminstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SaveItemInstanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SaveItemInstanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SaveItemInstanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemInstanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIteminstance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.catalog.ItemInstance.serializeBinaryToWriter
    );
  }
};


/**
 * optional string connectionId = 1;
 * @return {string}
 */
proto.catalog.SaveItemInstanceRequest.prototype.getConnectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SaveItemInstanceRequest.prototype.setConnectionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ItemInstance itemInstance = 2;
 * @return {?proto.catalog.ItemInstance}
 */
proto.catalog.SaveItemInstanceRequest.prototype.getIteminstance = function() {
  return /** @type{?proto.catalog.ItemInstance} */ (
    jspb.Message.getWrapperField(this, proto.catalog.ItemInstance, 2));
};


/** @param {?proto.catalog.ItemInstance|undefined} value */
proto.catalog.SaveItemInstanceRequest.prototype.setIteminstance = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.catalog.SaveItemInstanceRequest.prototype.clearIteminstance = function() {
  this.setIteminstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.catalog.SaveItemInstanceRequest.prototype.hasIteminstance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.catalog.SaveItemInstanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.catalog.SaveItemInstanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.catalog.SaveItemInstanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemInstanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.catalog.SaveItemInstanceResponse}
 */
proto.catalog.SaveItemInstanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.catalog.SaveItemInstanceResponse;
  return proto.catalog.SaveItemInstanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.catalog.SaveItemInstanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.catalog.SaveItemInstanceResponse}
 */
proto.catalog.SaveItemInstanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.catalog.SaveItemInstanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.catalog.SaveItemInstanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.catalog.SaveItemInstanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.catalog.SaveItemInstanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.catalog.SaveItemInstanceResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.catalog.SaveItemInstanceResponse.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.catalog.StoreType = {
  MONGO: 0
};

goog.object.extend(exports, proto.catalog);
