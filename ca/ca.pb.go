// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ca/ca.proto

package ca

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Take a certificate signing request
type SignCertificateRequest struct {
	Csr                  string   `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignCertificateRequest) Reset()         { *m = SignCertificateRequest{} }
func (m *SignCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*SignCertificateRequest) ProtoMessage()    {}
func (*SignCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abd073abb33f111, []int{0}
}

func (m *SignCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignCertificateRequest.Unmarshal(m, b)
}
func (m *SignCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignCertificateRequest.Marshal(b, m, deterministic)
}
func (m *SignCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertificateRequest.Merge(m, src)
}
func (m *SignCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_SignCertificateRequest.Size(m)
}
func (m *SignCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertificateRequest proto.InternalMessageInfo

func (m *SignCertificateRequest) GetCsr() string {
	if m != nil {
		return m.Csr
	}
	return ""
}

// Return a signed certificate.
type SignCertificateResponse struct {
	Crt                  string   `protobuf:"bytes,1,opt,name=crt,proto3" json:"crt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignCertificateResponse) Reset()         { *m = SignCertificateResponse{} }
func (m *SignCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*SignCertificateResponse) ProtoMessage()    {}
func (*SignCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abd073abb33f111, []int{1}
}

func (m *SignCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignCertificateResponse.Unmarshal(m, b)
}
func (m *SignCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignCertificateResponse.Marshal(b, m, deterministic)
}
func (m *SignCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertificateResponse.Merge(m, src)
}
func (m *SignCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_SignCertificateResponse.Size(m)
}
func (m *SignCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertificateResponse proto.InternalMessageInfo

func (m *SignCertificateResponse) GetCrt() string {
	if m != nil {
		return m.Crt
	}
	return ""
}

// Return the authority thrust certificate
type GetCaCertificateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCaCertificateRequest) Reset()         { *m = GetCaCertificateRequest{} }
func (m *GetCaCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*GetCaCertificateRequest) ProtoMessage()    {}
func (*GetCaCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abd073abb33f111, []int{2}
}

func (m *GetCaCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCaCertificateRequest.Unmarshal(m, b)
}
func (m *GetCaCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCaCertificateRequest.Marshal(b, m, deterministic)
}
func (m *GetCaCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCaCertificateRequest.Merge(m, src)
}
func (m *GetCaCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_GetCaCertificateRequest.Size(m)
}
func (m *GetCaCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCaCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCaCertificateRequest proto.InternalMessageInfo

type GetCaCertificateResponse struct {
	Ca                   string   `protobuf:"bytes,1,opt,name=ca,proto3" json:"ca,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCaCertificateResponse) Reset()         { *m = GetCaCertificateResponse{} }
func (m *GetCaCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*GetCaCertificateResponse) ProtoMessage()    {}
func (*GetCaCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8abd073abb33f111, []int{3}
}

func (m *GetCaCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCaCertificateResponse.Unmarshal(m, b)
}
func (m *GetCaCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCaCertificateResponse.Marshal(b, m, deterministic)
}
func (m *GetCaCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCaCertificateResponse.Merge(m, src)
}
func (m *GetCaCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_GetCaCertificateResponse.Size(m)
}
func (m *GetCaCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCaCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCaCertificateResponse proto.InternalMessageInfo

func (m *GetCaCertificateResponse) GetCa() string {
	if m != nil {
		return m.Ca
	}
	return ""
}

func init() {
	proto.RegisterType((*SignCertificateRequest)(nil), "ca.SignCertificateRequest")
	proto.RegisterType((*SignCertificateResponse)(nil), "ca.SignCertificateResponse")
	proto.RegisterType((*GetCaCertificateRequest)(nil), "ca.GetCaCertificateRequest")
	proto.RegisterType((*GetCaCertificateResponse)(nil), "ca.GetCaCertificateResponse")
}

func init() { proto.RegisterFile("ca/ca.proto", fileDescriptor_8abd073abb33f111) }

var fileDescriptor_8abd073abb33f111 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4e, 0xd4, 0x4f,
	0x4e, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x4e, 0x54, 0xd2, 0xe2, 0x12, 0x0b,
	0xce, 0x4c, 0xcf, 0x73, 0x4e, 0x2d, 0x2a, 0xc9, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0x49, 0x0d, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0x4e, 0x2e, 0x2e, 0x92, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0xb4, 0xb9, 0xc4, 0x31, 0xd4, 0x16, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x82, 0x15, 0x17, 0x95, 0xc0, 0x15, 0x17, 0x95, 0x28, 0x49, 0x72, 0x89, 0xbb, 0xa7, 0x96,
	0x38, 0x27, 0x62, 0x9a, 0xac, 0xa4, 0xc5, 0x25, 0x81, 0x29, 0x05, 0x35, 0x88, 0x8f, 0x8b, 0x29,
	0x39, 0x11, 0x6a, 0x0e, 0x53, 0x72, 0xa2, 0xd1, 0x46, 0x46, 0x2e, 0x11, 0x24, 0x75, 0x8e, 0xa5,
	0x25, 0x19, 0xf9, 0x45, 0x99, 0x25, 0x95, 0x42, 0x5e, 0x5c, 0xfc, 0x68, 0x8e, 0x11, 0x92, 0xd2,
	0x4b, 0x4e, 0xd4, 0xc3, 0xee, 0x1b, 0x29, 0x69, 0xac, 0x72, 0x50, 0x4b, 0x7d, 0xb9, 0x04, 0xd0,
	0x1d, 0x24, 0x04, 0xd6, 0x80, 0xc3, 0x07, 0x52, 0x32, 0xd8, 0x25, 0x21, 0xc6, 0x39, 0xb1, 0x44,
	0x31, 0x25, 0x27, 0x26, 0xb1, 0x81, 0x03, 0xd9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x10,
	0x2a, 0xc8, 0x73, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificateAuthorityClient is the client API for CertificateAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateAuthorityClient interface {
	// Signed a certificate request.
	SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error)
	// Return the Authority Trust Certificate.
	GetCaCertificate(ctx context.Context, in *GetCaCertificateRequest, opts ...grpc.CallOption) (*GetCaCertificateResponse, error)
}

type certificateAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewCertificateAuthorityClient(cc *grpc.ClientConn) CertificateAuthorityClient {
	return &certificateAuthorityClient{cc}
}

func (c *certificateAuthorityClient) SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error) {
	out := new(SignCertificateResponse)
	err := c.cc.Invoke(ctx, "/ca.CertificateAuthority/SignCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) GetCaCertificate(ctx context.Context, in *GetCaCertificateRequest, opts ...grpc.CallOption) (*GetCaCertificateResponse, error) {
	out := new(GetCaCertificateResponse)
	err := c.cc.Invoke(ctx, "/ca.CertificateAuthority/GetCaCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthorityServer is the server API for CertificateAuthority service.
type CertificateAuthorityServer interface {
	// Signed a certificate request.
	SignCertificate(context.Context, *SignCertificateRequest) (*SignCertificateResponse, error)
	// Return the Authority Trust Certificate.
	GetCaCertificate(context.Context, *GetCaCertificateRequest) (*GetCaCertificateResponse, error)
}

// UnimplementedCertificateAuthorityServer can be embedded to have forward compatible implementations.
type UnimplementedCertificateAuthorityServer struct {
}

func (*UnimplementedCertificateAuthorityServer) SignCertificate(ctx context.Context, req *SignCertificateRequest) (*SignCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCertificate not implemented")
}
func (*UnimplementedCertificateAuthorityServer) GetCaCertificate(ctx context.Context, req *GetCaCertificateRequest) (*GetCaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaCertificate not implemented")
}

func RegisterCertificateAuthorityServer(s *grpc.Server, srv CertificateAuthorityServer) {
	s.RegisterService(&_CertificateAuthority_serviceDesc, srv)
}

func _CertificateAuthority_SignCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).SignCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ca.CertificateAuthority/SignCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).SignCertificate(ctx, req.(*SignCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_GetCaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GetCaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ca.CertificateAuthority/GetCaCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GetCaCertificate(ctx, req.(*GetCaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ca.CertificateAuthority",
	HandlerType: (*CertificateAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignCertificate",
			Handler:    _CertificateAuthority_SignCertificate_Handler,
		},
		{
			MethodName: "GetCaCertificate",
			Handler:    _CertificateAuthority_GetCaCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca/ca.proto",
}
