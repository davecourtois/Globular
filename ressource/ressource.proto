/**
 * Management and definition of ressources.
 */
syntax = "proto3";
package ressource;

option go_package="ressource";

/** Account **/
message Account {
	string name=1;
	string email =2;
	string password =3;
}

/** A role is simply a list of actions that an account can call **/
message Role {
	string name=1;
	repeated string  actions=2; // must be a registered action from grpc.
}

message RegisterAccountRqst{
	Account account = 1;
	string password = 2;
	string confirm_password = 3;
}

message RegisterAccountRsp {
	string result = 1;
}

message DeleteAccountRqst{
	string name = 1;
}

message DeleteAccountRsp {
	string result = 1;
}

/** Authenticate the user **/
message AuthenticateRqst{
	string name = 1;
	string password =2;
}

message AuthenticateRsp {
	string token = 1;
}

/** Refresh token **/
message RefreshTokenRqst{
	string token = 1;
}

message RefreshTokenRsp {
	string token = 1;
}

message AddAccountRoleRqst{
	string accountId = 1;
	string roleId = 2;
}

message AddAccountRoleRsp{
	bool result = 1;
}

message RemoveAccountRoleRqst{
	string accountId = 1;
	string roleId = 2;
}

message RemoveAccountRoleRsp{
	bool result = 1;
}

message CreateRoleRqst{
	Role role = 1;
}

message CreateRoleRsp{
	bool result = 1;
}

message DeleteRoleRqst{
	string roleId = 1;
}

message DeleteRoleRsp{
	bool result = 1;
}


message AddRoleActionRqst{
	string roleId = 1;
	string action = 2;
}

message AddRoleActionRsp{
	bool result = 1;
}

message RemoveRoleActionRqst{
	string roleId = 1;
	string action = 2;
}

message RemoveRoleActionRsp{
	bool result = 1;
}


message GetAllActionsRqst{

}

message GetAllActionsRsp{
	repeated string actions = 1;
}

////////////////////////////////////////////////////////////////////////////////
// File permissions
////////////////////////////////////////////////////////////////////////////////

// Define a permission to a file or a directory.
message FilePermission {
	int32 number = 1;
	string path = 2;
	oneof owner {
		string user = 3;
		string role = 4;
	}
}

// Get the permission for a given file.
message GetPermissionsRqst{
	string path = 1;
}

message GetPermissionsRsp{
	repeated FilePermission permissions = 1;
}

// set the permission for a given file.
message SetPermissionRqst{
	FilePermission permission = 1;
}

message SetPermissionRsp{
	bool result = 1;
}

// set the permission for a given file.
message DeletePermissionsRqst{
	string path = 1;
	string owner = 2;
}

message DeletePermissionsRsp{
	bool result = 1;
}

// Retrun a json with the root file information.
message GetAllFilesInfoRqst{
	
}

message GetAllFilesInfoRsp{
	string result = 1;
}

/**
 * That service is use to manage Globular ressource like permissions and accounts
 * or role. The service made use of Persistence service to store various 
 * objects.
 */
service RessourceService {
	
	/** Register a new Account **/
	rpc RegisterAccount(RegisterAccountRqst) returns (RegisterAccountRsp);
	
	/** Delete an account **/
	rpc DeleteAccount(DeleteAccountRqst) returns(DeleteAccountRsp);
	
	/** Authenticate a user **/
	rpc Authenticate(AuthenticateRqst) returns(AuthenticateRsp);
	
	/** Refresh token get a new token **/
	rpc RefreshToken(RefreshTokenRqst) returns(RefreshTokenRsp);
	
	/** Add role to a given account **/
	rpc AddAccountRole(AddAccountRoleRqst) returns(AddAccountRoleRsp);

	/** Remove a role from a given account **/
	rpc RemoveAccountRole(RemoveAccountRoleRqst) returns(RemoveAccountRoleRsp);
	
	/** Create a role with given action list **/
	rpc CreateRole(CreateRoleRqst) returns(CreateRoleRsp);
	
	/** Delete a role with a given id **/
	rpc DeleteRole(DeleteRoleRqst) returns(DeleteRoleRsp);
	
	/** Append an action to existing role. **/
	rpc AddRoleAction(AddRoleActionRqst) returns(AddRoleActionRsp);
	
	/** Remove an action to existing role. **/
	rpc RemoveRoleAction(RemoveRoleActionRqst) returns(RemoveRoleActionRsp);
	
	/** Get all actions **/
	rpc GetAllActions(GetAllActionsRqst) returns(GetAllActionsRsp);
	
	/** Get All permissions for a given file/dir **/
	rpc GetPermissions(GetPermissionsRqst) returns(GetPermissionsRsp);
	
	/** Set a file permission, create new one if not already exist. **/
	rpc SetPermission(SetPermissionRqst) returns(SetPermissionRsp);
	
	/** Delete a file permissions **/
	rpc DeletePermissions(DeletePermissionsRqst) returns(DeletePermissionsRsp);
	
	/** Retrun a json string with all file info **/
	rpc GetAllFilesInfo(GetAllFilesInfoRqst) returns(GetAllFilesInfoRsp);
}