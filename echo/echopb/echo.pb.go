// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo/echopb/echo.proto

package echopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoRqst struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRqst) Reset()         { *m = EchoRqst{} }
func (m *EchoRqst) String() string { return proto.CompactTextString(m) }
func (*EchoRqst) ProtoMessage()    {}
func (*EchoRqst) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade6182a513b1ea, []int{0}
}

func (m *EchoRqst) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRqst.Unmarshal(m, b)
}
func (m *EchoRqst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRqst.Marshal(b, m, deterministic)
}
func (m *EchoRqst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRqst.Merge(m, src)
}
func (m *EchoRqst) XXX_Size() int {
	return xxx_messageInfo_EchoRqst.Size(m)
}
func (m *EchoRqst) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRqst.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRqst proto.InternalMessageInfo

func (m *EchoRqst) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type EchoRsp struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRsp) Reset()         { *m = EchoRsp{} }
func (m *EchoRsp) String() string { return proto.CompactTextString(m) }
func (*EchoRsp) ProtoMessage()    {}
func (*EchoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ade6182a513b1ea, []int{1}
}

func (m *EchoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRsp.Unmarshal(m, b)
}
func (m *EchoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRsp.Marshal(b, m, deterministic)
}
func (m *EchoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRsp.Merge(m, src)
}
func (m *EchoRsp) XXX_Size() int {
	return xxx_messageInfo_EchoRsp.Size(m)
}
func (m *EchoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRsp proto.InternalMessageInfo

func (m *EchoRsp) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRqst)(nil), "echo.EchoRqst")
	proto.RegisterType((*EchoRsp)(nil), "echo.EchoRsp")
}

func init() { proto.RegisterFile("echo/echopb/echo.proto", fileDescriptor_4ade6182a513b1ea) }

var fileDescriptor_4ade6182a513b1ea = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x4d, 0xce, 0xc8,
	0xd7, 0x07, 0x11, 0x05, 0x49, 0x60, 0x4a, 0xaf, 0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x88, 0x05, 0xc4,
	0x56, 0x92, 0xe1, 0xe2, 0x70, 0x4d, 0xce, 0xc8, 0x0f, 0x2a, 0x2c, 0x2e, 0x11, 0x12, 0xe0, 0x62,
	0x2e, 0x2e, 0x29, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x14, 0xb9, 0xd8,
	0xc1, 0xb2, 0xc5, 0x05, 0x42, 0x62, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x50, 0x79,
	0x28, 0xcf, 0xc8, 0x8c, 0x8b, 0x1b, 0xa4, 0x24, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48,
	0x9d, 0x8b, 0x05, 0xc4, 0x15, 0xe2, 0xd3, 0x03, 0x5b, 0x05, 0x33, 0x5b, 0x8a, 0x17, 0x89, 0x5f,
	0x5c, 0xa0, 0xc4, 0xe0, 0xc4, 0x11, 0xc5, 0x06, 0x71, 0x53, 0x12, 0x1b, 0xd8, 0x3d, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x97, 0x64, 0x67, 0xa9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Send echo message.
	Echo(ctx context.Context, in *EchoRqst, opts ...grpc.CallOption) (*EchoRsp, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRqst, opts ...grpc.CallOption) (*EchoRsp, error) {
	out := new(EchoRsp)
	err := c.cc.Invoke(ctx, "/echo.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	// Send echo message.
	Echo(context.Context, *EchoRqst) (*EchoRsp, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRqst))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo/echopb/echo.proto",
}
